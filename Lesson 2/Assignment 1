#include<iostream>
#include<fstream>
#include<ctime>
#include<cstdlib>

using namespace std;

// Image dimensions
const int width = 960;
const int height = 540;
const int maxRGB = 255;
const int rectanglesCount = 5;
const int rectangleWidth = width / rectanglesCount;
const int rectangleHeight = height / rectanglesCount;

int main() {
	// Seed the random number generator with the current time
	srand(time(0));

	// Creating the image
	ofstream image;
	image.open("image.ppm");
	if (image.is_open()) {
		// Header info
		image << "P3" << endl;
		image << width << " " << height << endl;
		image << maxRGB << endl;
	}
	// TODO Add Comments *Lazyyy*
	int colourCounter = 0;
	for (int heightCounter = 0; heightCounter < rectanglesCount; heightCounter++) {
		for (int y = 0; y < rectangleHeight; y++) {
			for (int widthCounter = 0; widthCounter < rectanglesCount; widthCounter++) {
				for (int x = 0; x < rectangleWidth; x++) {
					switch (colourCounter % 6) {
					case 0:
						image << maxRGB << " " << rand() % (maxRGB / 2) << " " << rand() % (maxRGB / 2) << endl;
						break;
					case 1:
						image << rand() % (maxRGB / 2) << " " << maxRGB << " " << rand() % (maxRGB / 2) << endl;
						break;
					case 2:
						image << rand() % (maxRGB / 2) << " " << rand() % (maxRGB / 2) << " " << maxRGB << endl;
						break;
					case 3:
						image << maxRGB << " " << maxRGB << " " << rand() % (maxRGB / 2) << endl;
						break;
					case 4:
						image << rand() % (maxRGB / 2) << " " << maxRGB << " " << maxRGB << endl;
						break;
					case 5:
						image << maxRGB << " " << rand() % (maxRGB / 2) << " " << maxRGB << endl;
						break;
					default:
						break;
					}
				}
				colourCounter++;
			}
			colourCounter -= rectanglesCount;
		}
		colourCounter += rectanglesCount;
	}

	image.close();
	return 0;
}
